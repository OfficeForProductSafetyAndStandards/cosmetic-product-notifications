<% title = "Select formulation type" %>
<% question = "How will you provide #{@component_name} formulation?" %>

<% page_title title, errors: @component.errors.any? %>
<% content_for :after_header do %>
  <%= govukBackLink text: "Back", href: previous_wizard_path %>
<% end %>

<% warning_html = if @component.notification_type.present?
                    govukWarningText(iconFallbackText: "Warning",
                                     classes: "govuk-!-width-three-quarters govuk-!-margin-top-3 opss-warning-text--m",
                                     text: "Changing the formulation type will remove all ingredients already added")
                  end
                %>


<%= form_with model: @component, url: wizard_path, method: :put do |form| %>
  <% 
    items = formulations_types_label.map { |type_key, type_object| 
      { 
        id: "component_notification_type_#{type_key}",
        text: type_object[:text], 
        value: type_key.to_sym, 
        checked: answer_checked?(type_key.to_sym), 
        label: { classes: type_object[:classes] }, 
        wrapper_classes: type_object[:wrapper_classes] 
      } 
    } 
  %>
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <%= error_summary_for(@component, first_values: {notification_type: items[0][:value]}) %>
        <div class="govuk-form-group <%= @component.errors.present? ? "govuk-form-group--error" : "" %>">
          <fieldset class="govuk-fieldset" aria-describedby="component_notification_type-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
              <h1 class="govuk-fieldset__heading">
                How will you provide the product formulation?
              </h1>
            </legend>  
            <p class="govuk-body govuk-!-width-three-quarters opss-secondary-text" id="type-hint">
            There are three formulation types: Predefined frame formulations, exact concentrations and concentration ranges. You can enter information manually or by uploading a <abbr title="Comma Separated Values">CSV</abbr> file.
            </p>
            <p class="govuk-body govuk-!-width-three-quarters govuk-!-margin-bottom-8 opss-secondary-text">
            Learn how you can <a href="/help/csv" class="govuk-link govuk-link--no-visited-state" rel="noreferrer noopener" target="_blank">use a <abbr>CSV</abbr> file (opens in a new tab)</a>.
            </p>
            <div class="govuk-hint" id="component_notification_type-hint">
              <div class="govuk-warning-text govuk-!-width-three-quarters govuk-!-margin-top-3 opss-warning-text--m">
                <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                <strong class="govuk-warning-text__text">
                  <span class="govuk-warning-text__assistive">Warning</span>
                  Changing the formulation type will remove all ingredients already added
                </strong>
              </div>
            </div>


            <% if @component.errors.present?  %>
              <p class="govuk-error-message" id="component_notification_type-error">
                <span class="govuk-visually-hidden">Error:</span>
                Notification type can not be blank
              </p>
            <% end %>
            <div class="govuk-radios" data-module="govuk-radios">
              <% items.each do |item| %>
                 <div class="govuk-radios__item <%= item[:wrapper_classes]%>">
                   <%
                     input_attributes = {
                      id: item[:id],
                      name: "component[notification_type]",
                      type: "radio",
                      value: item[:value],
                      class: "govuk-radios__input",
                    }
                    input_attributes.merge!({checked: "checked"}) if item[:checked]
                   %>
                   <%= tag.input(**input_attributes) %>
                   <%=
                     label_classes = class_names(
                       'govuk-radios__label',
                       { item[:label].try(:[], :classes) =>  item[:label] }
                     )
                     govukLabel({
                       html: item[:html],
                       text: item[:text],
                       classes: label_classes,
                       attributes: item[:label].try(:[], :attributes),
                       for: item[:id]
                     })
                   %>
                 </div>
              <% end %>
            </div>
          </fieldset>
        </div>
      </div>
      
    <%= govukButton text: "Continue" %>
    </div>
  </div>
<% end %>
