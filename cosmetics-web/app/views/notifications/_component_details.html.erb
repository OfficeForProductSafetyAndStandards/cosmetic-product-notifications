<%= govukSummaryList(
  classes: "govuk-summary-list govuk-!-margin-bottom-0 check-your-answers-table",
  rows: [
    if component.cmrs.any?
      {
        key: { text: "Contains CMR substances" },
        value: { text: "Yes" },
      }
    end,
    if component.cmrs.any?
      {
        key: { text: "CMR substances" },
        value: { html: render("application/none_or_bullet_list", entities_list: component.cmrs.map(&:display_name)) },
      }
    end,
    {
      key: { text: "Nanomaterials" },
      value: { html: render("application/none_or_bullet_list", entities_list: component_nano_materials_names(component)) },
    },
    if component.nano_materials.present?
      {
        key: { text: "Application instruction" },
        value: { text: get_exposure_routes_names(component.exposure_routes) },
      }
    end,
    if component.nano_materials.present?
      {
        key: { text: "Exposure condition" },
        value: { text: get_exposure_condition_name(component.exposure_condition) },
      }
    end,
    {
      key: { text: "Category of product" },
      value: { text: get_category_name(component.root_category) },
    },
    {
      key: { text: "Category of #{get_category_name(component.root_category)&.downcase&.singularize}" },
      value: { text: get_category_name(component.sub_category) },
    },
    {
      key: { text: "Category of #{get_category_name(component.sub_category)&.downcase&.singularize}" },
      value: { text: get_category_name(component.sub_sub_category) },
    },
    if current_user.can_view_product_ingredients?
      {
        key: { text: "Formulation given as" },
        value: { text: get_notification_type_name(component.notification_type) },
      }
    end,
    if current_user.can_view_product_ingredients?
      {
        key: { text: "Frame formulation" },
        value: { text: get_frame_formulation_name(component.frame_formulation) },
      }
    end,
    if current_user.can_view_product_ingredients? && !component.predefined?
      {
        key: { text: "Formulation" },
        value: { html: render("notifications/component_details_formulation_ingredients",
                 component: component,
                 allow_edits: allow_edits) },
        actions: {
          items: if component.formulation_file.attached? && allow_edits
                   [
                     {
                       href: edit_responsible_person_notification_component_formulation_path(
                               component.notification.responsible_person,
                               component.notification,
                               component
                             ),
                       text: "Change",
                       visuallyHiddenText: "formulation file"
                     }
                   ]
                 else
                   []
                 end
        }
      }
    end,
    {
      key: { text: "Physical form" },
      value: { text: get_physical_form_name(component.physical_form) },
    },
    if current_user.can_view_product_ingredients?
      {
        key: { text: "Special applicator" },
        value: { text: component.special_applicator.present? ? "Yes" : "No" },
      }
    end,
    if current_user.can_view_product_ingredients? && component.special_applicator.present?
      {
        key: { text: "Applicator type" },
        value: { text: component_special_applicator_name(component) },
      }
    end,
    if current_user.can_view_product_ingredients?
      {
        key: { text: "Acute poisoning information" },
        value: { text: component.acute_poisoning_info },
      }
    end,
    if current_user.can_view_product_ingredients? && component.predefined?
      {
        key: { text: "Contains ingredients NPIS needs to know about" },
        value: { text: component.poisonous_ingredients_answer },
      }
    end,
    if current_user.can_view_product_ingredients? && component.predefined? && component.contains_poisonous_ingredients
      {
        key: { text: "Ingredients NPIS needs to know about" },
        value: { html: render("notifications/component_details_poisonous_ingredients",
                 component: component,
                 allow_edits: allow_edits) },
      }
    end,
  ].compact
) %>

<% if current_user.can_view_product_ingredients? && component.trigger_questions %>
  <%= render "notifications/ph", component: component %>
  <% component.trigger_questions.each do |question| %>
    <% unless question.question == "please_indicate_the_ph" %>
      <%= render "notifications/trigger_question_details", trigger_question: question, display_not_applicable: true %>
    <% end %>
  <% end %>
<% end %>
