name: Deploy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to Staging and Production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Install cf client
      env:
        CF_CLI_VERSION: 7.0.0-beta.25
      run: |
        curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=${CF_CLI_VERSION}" | tar -zx -C /tmp
        sudo cp /tmp/cf7 /usr/local/bin/cf7

    - name: Create GitHub deployment for Staging
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        BRANCH: master
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_create staging

    - name: Initiate Staging deployment status
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        DEPLOY_STATUSES_URL: ${{ env.DEPLOY_STATUSES_URL }}
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_initiate staging

    - name: Deploy to Staging
      env:
        SPACE: staging
        APP_NAME: cosmetics-web
        SUBMIT_HOST: staging-submit.cosmetic-product-notifications.service.gov.uk
        SEARCH_HOST: staging-search.cosmetic-product-notifications.service.gov.uk
        CF_USERNAME: ${{ secrets.PaaSUsernameStaging }}
        CF_PASSWORD: ${{ secrets.PaaSPasswordStaging }}
      run: |
        cf7 api api.london.cloud.service.gov.uk
        cf7 auth
        cf7 target -o 'beis-opss' -s $SPACE
        chmod +x ./cosmetics-web/deploy.sh
        ./cosmetics-web/deploy.sh
        cf7 logout

    - name: Update Staging deployment status (success)
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        DEPLOY_STATUSES_URL: ${{ env.DEPLOY_STATUSES_URL }}
        LOG_URL: ${{ env.LOG_URL }}
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_success staging

    - name: Update Staging deployment status (failure)
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        DEPLOY_STATUSES_URL: ${{ env.DEPLOY_STATUSES_URL }}
        LOG_URL: ${{ env.LOG_URL }}
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_failure staging

    - name: Create GitHub deployment for Production
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        BRANCH: master
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_create production

    - name: Initiate Production deployment status
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        DEPLOY_STATUSES_URL: ${{ env.DEPLOY_STATUSES_URL }}
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_initiate production

    - name: Deploy to production
      env:
        SPACE: prod
        APP_NAME: cosmetics-web
        SUBMIT_HOST: submit.cosmetic-product-notifications.service.gov.uk
        SEARCH_HOST: search.cosmetic-product-notifications.service.gov.uk
        CF_USERNAME: ${{ secrets.PaaSUsernameProduction }}
        CF_PASSWORD: ${{ secrets.PaaSPasswordProduction }}
      run: |
        cf7 api api.london.cloud.service.gov.uk
        cf7 auth
        cf7 target -o 'beis-opss' -s $SPACE
        ./cosmetics-web/deploy.sh
        cf7 logout

    - name: Update Production deployment status (success)
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        DEPLOY_STATUSES_URL: ${{ env.DEPLOY_STATUSES_URL }}
        LOG_URL: ${{ env.LOG_URL }}
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_success production

    - name: Update Production deployment status (failure)
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        DEPLOY_STATUSES_URL: ${{ env.DEPLOY_STATUSES_URL }}
        LOG_URL: ${{ env.LOG_URL }}
      run: |
        source cosmetics-web/deploy-github-functions.sh
        gh_deploy_failure production
