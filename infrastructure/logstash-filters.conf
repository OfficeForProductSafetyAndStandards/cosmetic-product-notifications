filter {
    grok {
        # attempt to parse syslog lines
        match => { "message" => "%{SYSLOG5424PRI}%{NONNEGINT:syslog_ver} +(?:%{TIMESTAMP_ISO8601:syslog_timestamp}|-) +(?:%{HOSTNAME:syslog_host}|-) +(?:%{NOTSPACE:syslog_app}|-) +(?:%{NOTSPACE:syslog_proc}|-) +(?:%{WORD:syslog_msgid}|-) +(?:%{SYSLOG5424SD:syslog_sd}|-|) +%{GREEDYDATA:syslog_msg}" }
        # if successful, save original `@timestamp` and `host` fields created by logstash
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
        tag_on_failure => ["_syslogparsefailure"]
    }

    # parse the syslog pri field into severity/facility
    syslog_pri { syslog_pri_field_name => 'syslog5424_pri' }

    # replace @timestamp field with the one from syslog
    date { match => [ "syslog_timestamp", "ISO8601" ] }

    # Cloud Foundry passes the app name, space and organisation in the syslog_host
    # Filtering them into separate fields makes it easier to query multiple apps in a single Kibana instance
    dissect {
        mapping => { "syslog_host" => "%{[cf][org]}.%{[cf][space]}.%{[cf][app]}" }
        tag_on_failure => ["_sysloghostdissectfailure"]
    }

    # Cloud Foundry gorouter logs
    if [syslog_proc] =~ "RTR" {
        mutate { replace => { "type" => "gorouter" } }
        grok {
            match => { "syslog_msg" => "%{HOSTNAME:[access][host]} - \[%{TIMESTAMP_ISO8601:router_timestamp}\] \"%{WORD:[access][method]} %{NOTSPACE:[access][url]} HTTP/%{NUMBER:[access][http_version]}\" %{NONNEGINT:[access][response_code]:int} %{NONNEGINT:[access][body_received][bytes]:int} %{NONNEGINT:[access][body_sent][bytes]:int} %{QUOTEDSTRING:[access][referrer]} %{QUOTEDSTRING:[access][agent]} \"%{HOSTPORT:[access][remote_ip_and_port]}\" \"%{HOSTPORT:[access][upstream_ip_and_port]}\" %{GREEDYDATA:router_keys}" }
            tag_on_failure => ["_routerparsefailure"]
            add_tag => ["gorouter"]
        }
        # replace @timestamp field with the one from router access log
        date {
            match => [ "router_timestamp", "ISO8601" ]
        }
        kv {
            source => "router_keys"
            target => "router"
            value_split => ":"
            remove_field => "router_keys"
        }
    }

    # paas-metric-exporter logs
    if [syslog_proc] =~ "APP" and [cf][app] =~ "metric-exporter" {
        mutate {
            replace => { "type" => "metric" }
            add_tag => ["metric"]
        }

        if [syslog_msg] =~ "^gauge" {
            dissect {
                mapping => { "syslog_msg" => "%{[metric][type]} mycf.%{[cf][space]}.%{[cf][app]}.%{[cf][app_instance]}.%{[metric][name]} %{[metric][value]}" }
                convert_datatype => {
                    "[cf][app_instance]" => "int"
                    "[metric][value]" => "int"
                }
                tag_on_failure => ["_gaugemetricparsefailure"]
            }
        } else if [syslog_msg] =~ "^timing" or [syslog_msg] =~ "^incr" {
            dissect {
                mapping => { "syslog_msg" => "%{[metric][type]} mycf.%{[cf][space]}.%{[cf][app]}.%{[cf][app_instance]}.%{[metric][name]}.%{[metric][status_range]} %{[metric][value]}" }
                convert_datatype => {
                    "[cf][app_instance]" => "int"
                    "[metric][value]" => "int"
                }
                tag_on_failure => ["_timingmetricparsefailure"]
            }
        } else if [syslog_msg] =~ "^app" {
            dissect {
                mapping => { "syslog_msg" => "%{[metric][type]} %{[metric][guid]} %{[metric][name]}" }
                tag_on_failure => ["_appmetricparsefailure"]
            }
        } else {
            mutate { add_tag => ["_unknownmetricparsefailure"] }
        }
    } else if [syslog_msg] =~ "^completeNotifications" {
        dissect {
            mapping => { "syslog_msg" => "completeNotifications: %{complete_notifications}," }
            convert_datatype => {
                "complete_notifications" => "int"
            }
            tag_on_failure => ["_completenotificationsparsefailure"]
        }
    } else if [syslog_msg] =~ "^responsiblePersons" {
        dissect {
            mapping => { "syslog_msg" => "responsiblePersons: %{responsible_persons}," }
            convert_datatype => {
                "responsible_persons" => "int"
            }
            tag_on_failure => ["_responsiblepersonsparsefailure"]
        }
    }  else if [syslog_msg] =~ "^openInvestigationsCount" {
        dissect {
            mapping => { "syslog_msg" => "openInvestigationsCount: %{open_investigations_count}," }
            convert_datatype => {
                "open_investigations_count" => "int"
            }
            tag_on_failure => ["_openinvestigationscountparsefailure"]
        }
    } else if [syslog_msg] =~ "^investigationsCount" {
        dissect {
            mapping => { "syslog_msg" => "investigationsCount: %{investigations_count}," }
            convert_datatype => {
                "investigations_count" => "int"
            }
            tag_on_failure => ["_investigationscountparsefailure"]
        }
    }  else if [syslog_msg] =~ "^activitiesCount" {
        dissect {
            mapping => { "syslog_msg" => "activitiesCount: %{activities_count}," }
            convert_datatype => {
                "activities_count" => "int"
            }
            tag_on_failure => ["_activitiescountparsefailure"]
        }
    }  else if [syslog_msg] =~ "^alertsCount" {
        dissect {
            mapping => { "syslog_msg" => "alertsCount: %{alerts_count}," }
            convert_datatype => {
                "alerts_count" => "int"
            }
            tag_on_failure => ["_alertscountparsefailure"]
        }
    } else if [syslog_proc] =~ "APP" {
        # Other application logs
        mutate { add_tag => ["app"] }
    }

    # User agent parsing
    if [access][agent] {
        useragent {
            source => "[access][agent]"
            target => "[access][user_agent]"
        }
    }

    if !("_syslogparsefailure" in [tags]) {
        # if we successfully parsed syslog, replace the message and source_host fields
        mutate {
            rename => [ "syslog_host", "source_host" ]
            rename => [ "syslog_msg", "message" ]
        }
    }
}
